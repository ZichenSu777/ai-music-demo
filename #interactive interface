#interactive interface
from transformers import AutoProcessor, MusicgenForConditionalGeneration
import soundfile as sf
import tkinter as tk
from tkinter import ttk, filedialog
import os

# Loading Models
processor = AutoProcessor.from_pretrained("facebook/musicgen-small")
model = MusicgenForConditionalGeneration.from_pretrained("facebook/musicgen-small")

def generate_music():
    # Getting the parameters entered in the interface
    text = text_input.get()  # text instruction
    duration = int(duration_slider.get())  # Duration (seconds)
    tempo = tempo_input.get()  # Speed (beats/minute)
    instrument = instrument_input.get()  # Instrument Type
    
    # Combined full command
    full_text = f"{text}，musical instruments：{instrument}，each minute{tempo}拍"
    status_label.config(text=f"Generating：{full_text}...")
    
    # Processing inputs
    inputs = processor(text=[full_text], padding=True, return_tensors="pt")
    
    # Generate Music
    max_tokens = 128 * duration  
    audio_values = model.generate(** inputs, max_new_tokens=max_tokens, temperature=0.7)
    
    # Save file
    save_path = filedialog.asksaveasfilename(
        defaultextension=".wav",
        filetypes=[("WAV file", "*.wav"), ("all file", "*.*")]
    )
    if save_path:
        sf.write(save_path, audio_values[0].numpy(), samplerate=model.config.audio_encoder.sampling_rate)
        status_label.config(text=f"Generated successfully! Saved to：{save_path}")

# Creation Interface
root = tk.Tk()
root.title("AIMusic Generation Tools")
root.geometry("600x400")  # window size

# Text command input
tk.Label(root, text="Please enter a description of the music (e.g. "sad melody").）：").pack(pady=5)
text_input = tk.Entry(root, width=60)
text_input.pack(pady=5)
text_input.insert(0, "Tender Melody")  

# Instrument Type
tk.Label(root, text="Type of instrument (e.g. "piano", "violin")）：").pack(pady=5)
instrument_input = tk.Entry(root, width=30)
instrument_input.pack(pady=5)
instrument_input.insert(0, "piano")

# Speed (beats/minute)
tk.Label(root, text="Speed (beats/minute)：").pack(pady=5)
tempo_input = tk.Entry(root, width=10)
tempo_input.pack(pady=5)
tempo_input.insert(0, "120")

# Duration Slider
tk.Label(root, text="Duration of music (seconds)：").pack(pady=5)
duration_slider = tk.Scale(root, from_=3, to=20, orient="horizontal", length=300)
duration_slider.set(8)  
duration_slider.pack(pady=5)

# Generate Button
generate_btn = tk.Button(root, text="Generate Music", command=generate_music, width=20, height=2)
generate_btn.pack(pady=10)

# Status Alerts
status_label = tk.Label(root, text="Ready.", fg="blue")
status_label.pack(pady=10)

# the startup screen
root.mainloop()

